import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import {
  getGiayChitietDetail,
  getAllGiayChiTiet,
  getGiayChitietDetail1,
} from "../service/GiayChiTietService";
import { getGiayDetail } from "../service/GiayService";
import "./sanphamchitiet.css";
import { addToCart } from "../service/GioHangChiTietService";
import { Button, message } from "antd";
const ProductDetail = () => {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [productGiay, setProductGiay] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedSize, setSelectedSize] = useState(null);
  const [selectedColor, setSelectedColor] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [bienTheList, setBienTheList] = useState([]);
  const [currentPrice, setCurrentPrice] = useState(productGiay?.giaBan || 0);
  const [selectedVariantDetails, setSelectedVariantDetails] = useState(null);
  const [sizeList, setSizeList] = useState([]);
  const [anhCHiTiet, setanhCHiTiet] = useState([]);
  const [soLuongChitiet, setSoLuongChiTiet] = useState([]);
  const [totalQuantity, setTotalQuantity] = useState(0); // Th√™m d√≤ng n√†y ƒë·ªÉ khai b√°o totalQuantity

  console.log("anh chi tiet", anhCHiTiet);

  useEffect(() => {
    fetchProductDetail();
  }, [id]);

  const fetchProductDetail = async () => {
    try {
      console.log(`üîç ƒêang l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m v·ªõi ID: ${id}`);
      const giayDto = { id };
      const giayResponse = await getGiayDetail(giayDto);
      const giayChiTietResponse = await getGiayChitietDetail1(id); // L·∫•y danh s√°ch chi ti·∫øt gi√†y

      // console.log("K·∫øt qu·∫£ t·ª´ getGiayDetail:", giayResponse.data);
      console.log("K·∫øt qu·∫£ t·ª´ getAllGiayChiTiet:", giayChiTietResponse.data);

      if (
        Array.isArray(giayChiTietResponse.data) &&
        giayChiTietResponse.data.length > 0
      ) {
        const bienTheSanPham = giayChiTietResponse.data.map((item) => ({
          idMauSac: item.mauSacEntity?.id, // ID m√†u s·∫Øc
          tenMauSac: item.mauSacEntity?.ten, // T√™n m√†u s·∫Øc
          idGiayChiTiet: item.id,
          giaBan: item.giaBan,
          idKichCo: item.kichCoEntity?.id,
          tenKichCo: item.kichCoEntity?.ten,
          soLuong: item.soLuongTon,
          anh: item.danhSachAnh,
        }));

        console.log("Danh s√°ch bi·∫øn th·ªÉ s·∫£n ph·∫©m:", bienTheSanPham);
        setBienTheList(bienTheSanPham);
      } else {
        setBienTheList([]);
      }

      setProductGiay(giayResponse.data);
      setProduct(giayChiTietResponse.data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
    } finally {
      setLoading(false);
    }
  };
  const handleColorSelect = (color) => {
    setSelectedColor(color);

    const variantsWithSameColor = bienTheList.filter(
      (item) => item.tenMauSac === color
    );
    console.log("aaa", variantsWithSameColor);

    if (variantsWithSameColor.length > 0) {
      const sizeList = variantsWithSameColor.map(
        (variant) => variant.tenKichCo
      );
      setSizeList(sizeList);
      setCurrentPrice(variantsWithSameColor[0].giaBan);

      // L·∫•y danh s√°ch URL ·∫£nh t·ª´ t·∫•t c·∫£ bi·∫øn th·ªÉ c√≥ c√πng m√†u
      const imageList = variantsWithSameColor.flatMap((variant) =>
        variant.anh ? variant.anh.map((img) => img.tenUrl) : []
      );
      setanhCHiTiet(imageList);

      // L·∫•y danh s√°ch s·ªë l∆∞·ª£ng t·ª´ c√°c bi·∫øn th·ªÉ c√≥ c√πng m√†u v√† k√≠ch c·ª°
      const quantityList = variantsWithSameColor.map(
        (variant) => variant.soLuong
      );
      setSoLuongChiTiet(quantityList); // L∆∞u danh s√°ch s·ªë l∆∞·ª£ng v√†o state

      // T√≠nh t·ªïng s·ªë l∆∞·ª£ng khi ch∆∞a ch·ªçn k√≠ch c·ª°
      const totalQuantity = quantityList.reduce((acc, qty) => acc + qty, 0);
      setTotalQuantity(totalQuantity); // C·∫≠p nh·∫≠t t·ªïng s·ªë l∆∞·ª£ng v√†o state

      // L∆∞u danh s√°ch k√≠ch c·ª°, ·∫£nh v√† s·ªë l∆∞·ª£ng
      setSelectedVariantDetails({
        tenMauSac: color,
        sizes: sizeList,
        images: imageList, // Th√™m danh s√°ch ·∫£nh
        quantities: quantityList, // Th√™m danh s√°ch s·ªë l∆∞·ª£ng
      });

      console.log("Danh s√°ch k√≠ch c·ª°:", sizeList);
      console.log("Danh s√°ch ·∫£nh:", imageList);
      console.log("Danh s√°ch s·ªë l∆∞·ª£ng:", quantityList); // Ki·ªÉm tra s·ªë l∆∞·ª£ng
      console.log("T·ªïng s·ªë l∆∞·ª£ng:", totalQuantity); // Ki·ªÉm tra t·ªïng s·ªë l∆∞·ª£ng
    } else {
      console.log("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ n√†o c√≥ m√†u s·∫Øc ƒë∆∞·ª£c ch·ªçn");
    }
  };

  // H√†m x·ª≠ l√Ω khi ch·ªçn k√≠ch c·ª°
  const handleSizeSelect = (size) => {
    // T√¨m s·ªë l∆∞·ª£ng t∆∞∆°ng ·ª©ng v·ªõi k√≠ch c·ª° ƒë√£ ch·ªçn
    const selectedVariant = bienTheList.find(
      (variant) =>
        variant.tenMauSac === selectedColor && variant.tenKichCo === size
    );

    if (selectedVariant) {
      setSoLuongChiTiet(selectedVariant.soLuong); // L∆∞u s·ªë l∆∞·ª£ng t∆∞∆°ng ·ª©ng v·ªõi k√≠ch c·ª° ƒë√£ ch·ªçn
      console.log("S·ªë l∆∞·ª£ng c·ªßa k√≠ch c·ª° ƒë√£ ch·ªçn:", selectedVariant.soLuong);
    }
  };

  const handleAddToCart = async () => {
    if (!selectedSize || !selectedColor) {
      message.warning("Vui l√≤ng ch·ªçn k√≠ch th∆∞·ªõc v√† m√†u s·∫Øc!");
      return;
    }
    const selectedVariant = bienTheList.find(
      (item) =>
        item.tenMauSac === selectedColor && item.tenKichCo === selectedSize
    );
    if (!selectedVariant) {
      message.error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi l·ª±a ch·ªçn n√†y!");
      return;
    }
    try {
      const response = await addToCart(selectedVariant.idGiayChiTiet, quantity);
      if (response.status === 200) {
        message.success("ƒê√£ th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!");
      } else {
        message.error("Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i!");
      }
    } catch (error) {
      message.error("C√≥ l·ªói x·∫£y ra khi th√™m v√†o gi·ªè h√†ng!");
    }
  };

  if (loading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>; // Hi·ªÉn th·ªã khi ƒëang t·∫£i

  return (
    <div className="product-detail">
      <div className="left">
        <div className="product-images">
          {anhCHiTiet.length > 0 ? (
            anhCHiTiet.map((url, index) => (
              <img
                key={index}
                src={url || "default_image.jpg"} // N·∫øu URL kh√¥ng c√≥ th√¨ d√πng ·∫£nh m·∫∑c ƒë·ªãnh
                alt={productGiay.ten}
                style={{ width: "600px", height: "600px", margin: "5px" }}
              />
            ))
          ) : productGiay.anhGiayEntities?.length > 0 ? (
            productGiay.anhGiayEntities.map((anh, index) => (
              <img
                key={anh.id || index}
                src={anh.tenUrl || "default_image.jpg"} // N·∫øu URL kh√¥ng c√≥ th√¨ d√πng ·∫£nh m·∫∑c ƒë·ªãnh
                alt={productGiay.ten}
                style={{ width: "600px", height: "600px", margin: "5px" }}
              />
            ))
          ) : (
            <p>Kh√¥ng c√≥ h√¨nh ·∫£nh.</p>
          )}
        </div>
      </div>
      <div className="right">
        <div className="product-info">
          <p className="product-title">{productGiay?.ten}</p>
          <p className="product-price">
            {selectedColor
              ? Number(currentPrice).toLocaleString()
              : Number(productGiay?.giaBan ?? 0).toLocaleString()}
            ‚Ç´
          </p>
        </div>

        <div className="product-options">
          <div>
            <strong>K√≠ch th∆∞·ªõc:</strong>
            <div className="size-options">
              {sizeList.map((size) => (
                <div
                  key={size}
                  className={`size-box ${
                    selectedSize === size ? "active" : ""
                  }`}
                  onClick={() => {
                    setSelectedSize(size); // C·∫≠p nh·∫≠t k√≠ch c·ª° ƒë√£ ch·ªçn
                    handleSizeSelect(size); // G·ªçi h√†m x·ª≠ l√Ω khi ch·ªçn k√≠ch c·ª°
                  }}
                >
                  {size}
                </div>
              ))}
            </div>
          </div>

          {/* M√†u s·∫Øc */}
          <div>
            <strong>M√†u s·∫Øc:</strong>
            <div className="color-options">
              {[...new Set(bienTheList.map((item) => item.tenMauSac))].map(
                (color) => (
                  <div
                    key={color}
                    className={`color-box ${
                      selectedColor === color ? "active" : ""
                    }`}
                    onClick={() => handleColorSelect(color)}
                  >
                    {color}
                  </div>
                )
              )}
            </div>
          </div>

          {/* S·ªë l∆∞·ª£ng */}
          <div className="quantity">
            <div>
              <strong>S·ªë l∆∞·ª£ng:</strong>
              <Button onClick={() => setQuantity(Math.max(1, quantity - 1))}>
                -
              </Button>
              <span>{quantity}</span>
              <Button onClick={() => setQuantity(quantity + 1)}>+</Button>
            </div>
            {(selectedSize ? soLuongChitiet : totalQuantity) > 0 && (
              <p style={{ color: "red", fontSize: "10px" }}>
                ( S·ªë L∆∞·ª£ng: {selectedSize ? soLuongChitiet : totalQuantity} )
              </p>
            )}
          </div>

          {/* N√∫t Mua ngay */}
          <div
            className="buy-button"
            onClick={handleAddToCart}
            style={{ borderRadius: "15px" }}
          >
            MUA NGAY V·ªöI GI√Å {""}
            {selectedColor
              ? currentPrice.toLocaleString()
              : productGiay?.giaBan?.toLocaleString() || "0"}
            ‚Ç´
          </div>
        </div>

        {/* Ch√≠nh s√°ch */}
        <div className="policy">
          <p>
            ‚úÖ KI·ªÇM TRA H√ÄNG V√Ä THANH TO√ÅN KHI <strong>NH·∫¨N H√ÄNG</strong>
          </p>
          <p>
            üöõ GIAO H√ÄNG <strong>TO√ÄN QU·ªêC</strong>
          </p>
          <p>
            üõ†Ô∏è S·∫¢N PH·∫®M GI√ÄY T√ÇY: B·∫¢O H√ÄNH <strong>3 NƒÇM</strong>
          </p>
          <p>
            üîÑ ƒê·ªîI H√ÄNG TRONG V√íNG <strong>33 NG√ÄY</strong>
          </p>
        </div>
      </div>
    </div>
  );
};

export default ProductDetail;
